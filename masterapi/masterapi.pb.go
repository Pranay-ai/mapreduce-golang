// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: masterapi.proto

package masterapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterWorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workerid      string                 `protobuf:"bytes,1,opt,name=workerid,proto3" json:"workerid,omitempty"`
	Workerport    string                 `protobuf:"bytes,2,opt,name=workerport,proto3" json:"workerport,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterWorkerRequest) Reset() {
	*x = RegisterWorkerRequest{}
	mi := &file_masterapi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkerRequest) ProtoMessage() {}

func (x *RegisterWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_masterapi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkerRequest.ProtoReflect.Descriptor instead.
func (*RegisterWorkerRequest) Descriptor() ([]byte, []int) {
	return file_masterapi_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterWorkerRequest) GetWorkerid() string {
	if x != nil {
		return x.Workerid
	}
	return ""
}

func (x *RegisterWorkerRequest) GetWorkerport() string {
	if x != nil {
		return x.Workerport
	}
	return ""
}

type RegisterWorkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterWorkerResponse) Reset() {
	*x = RegisterWorkerResponse{}
	mi := &file_masterapi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkerResponse) ProtoMessage() {}

func (x *RegisterWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_masterapi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkerResponse.ProtoReflect.Descriptor instead.
func (*RegisterWorkerResponse) Descriptor() ([]byte, []int) {
	return file_masterapi_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterWorkerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterWorkerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workerid      string                 `protobuf:"bytes,1,opt,name=workerid,proto3" json:"workerid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	mi := &file_masterapi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_masterapi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_masterapi_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRequest) GetWorkerid() string {
	if x != nil {
		return x.Workerid
	}
	return ""
}

type TaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Taskid        string                 `protobuf:"bytes,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	Tasktype      string                 `protobuf:"bytes,2,opt,name=tasktype,proto3" json:"tasktype,omitempty"`
	Inputpath     string                 `protobuf:"bytes,3,opt,name=inputpath,proto3" json:"inputpath,omitempty"`
	Outputdir     string                 `protobuf:"bytes,4,opt,name=outputdir,proto3" json:"outputdir,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	mi := &file_masterapi_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_masterapi_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_masterapi_proto_rawDescGZIP(), []int{3}
}

func (x *TaskResponse) GetTaskid() string {
	if x != nil {
		return x.Taskid
	}
	return ""
}

func (x *TaskResponse) GetTasktype() string {
	if x != nil {
		return x.Tasktype
	}
	return ""
}

func (x *TaskResponse) GetInputpath() string {
	if x != nil {
		return x.Inputpath
	}
	return ""
}

func (x *TaskResponse) GetOutputdir() string {
	if x != nil {
		return x.Outputdir
	}
	return ""
}

func (x *TaskResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type TaskStatusReport struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Workerid          string                 `protobuf:"bytes,1,opt,name=workerid,proto3" json:"workerid,omitempty"`
	Taskid            string                 `protobuf:"bytes,2,opt,name=taskid,proto3" json:"taskid,omitempty"`
	Success           bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error             string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Intermediatefiles map[string]string      `protobuf:"bytes,5,rep,name=intermediatefiles,proto3" json:"intermediatefiles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaskStatusReport) Reset() {
	*x = TaskStatusReport{}
	mi := &file_masterapi_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusReport) ProtoMessage() {}

func (x *TaskStatusReport) ProtoReflect() protoreflect.Message {
	mi := &file_masterapi_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusReport.ProtoReflect.Descriptor instead.
func (*TaskStatusReport) Descriptor() ([]byte, []int) {
	return file_masterapi_proto_rawDescGZIP(), []int{4}
}

func (x *TaskStatusReport) GetWorkerid() string {
	if x != nil {
		return x.Workerid
	}
	return ""
}

func (x *TaskStatusReport) GetTaskid() string {
	if x != nil {
		return x.Taskid
	}
	return ""
}

func (x *TaskStatusReport) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TaskStatusReport) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TaskStatusReport) GetIntermediatefiles() map[string]string {
	if x != nil {
		return x.Intermediatefiles
	}
	return nil
}

type TaskStatusAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStatusAck) Reset() {
	*x = TaskStatusAck{}
	mi := &file_masterapi_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStatusAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusAck) ProtoMessage() {}

func (x *TaskStatusAck) ProtoReflect() protoreflect.Message {
	mi := &file_masterapi_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusAck.ProtoReflect.Descriptor instead.
func (*TaskStatusAck) Descriptor() ([]byte, []int) {
	return file_masterapi_proto_rawDescGZIP(), []int{5}
}

func (x *TaskStatusAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_masterapi_proto protoreflect.FileDescriptor

const file_masterapi_proto_rawDesc = "" +
	"\n" +
	"\x0fmasterapi.proto\"S\n" +
	"\x15RegisterWorkerRequest\x12\x1a\n" +
	"\bworkerid\x18\x01 \x01(\tR\bworkerid\x12\x1e\n" +
	"\n" +
	"workerport\x18\x02 \x01(\tR\n" +
	"workerport\"L\n" +
	"\x16RegisterWorkerResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\")\n" +
	"\vTaskRequest\x12\x1a\n" +
	"\bworkerid\x18\x01 \x01(\tR\bworkerid\"\xf4\x01\n" +
	"\fTaskResponse\x12\x16\n" +
	"\x06taskid\x18\x01 \x01(\tR\x06taskid\x12\x1a\n" +
	"\btasktype\x18\x02 \x01(\tR\btasktype\x12\x1c\n" +
	"\tinputpath\x18\x03 \x01(\tR\tinputpath\x12\x1c\n" +
	"\toutputdir\x18\x04 \x01(\tR\toutputdir\x127\n" +
	"\bmetadata\x18\x05 \x03(\v2\x1b.TaskResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x94\x02\n" +
	"\x10TaskStatusReport\x12\x1a\n" +
	"\bworkerid\x18\x01 \x01(\tR\bworkerid\x12\x16\n" +
	"\x06taskid\x18\x02 \x01(\tR\x06taskid\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\x12V\n" +
	"\x11intermediatefiles\x18\x05 \x03(\v2(.TaskStatusReport.IntermediatefilesEntryR\x11intermediatefiles\x1aD\n" +
	"\x16IntermediatefilesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\")\n" +
	"\rTaskStatusAck\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2\xb1\x01\n" +
	"\tMasterApi\x12A\n" +
	"\x0eRegisterWorker\x12\x16.RegisterWorkerRequest\x1a\x17.RegisterWorkerResponse\x12*\n" +
	"\vRequestTask\x12\f.TaskRequest\x1a\r.TaskResponse\x125\n" +
	"\x10ReportTaskStatus\x12\x11.TaskStatusReport\x1a\x0e.TaskStatusAckB\x0eZ\f./;masterapib\x06proto3"

var (
	file_masterapi_proto_rawDescOnce sync.Once
	file_masterapi_proto_rawDescData []byte
)

func file_masterapi_proto_rawDescGZIP() []byte {
	file_masterapi_proto_rawDescOnce.Do(func() {
		file_masterapi_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_masterapi_proto_rawDesc), len(file_masterapi_proto_rawDesc)))
	})
	return file_masterapi_proto_rawDescData
}

var file_masterapi_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_masterapi_proto_goTypes = []any{
	(*RegisterWorkerRequest)(nil),  // 0: RegisterWorkerRequest
	(*RegisterWorkerResponse)(nil), // 1: RegisterWorkerResponse
	(*TaskRequest)(nil),            // 2: TaskRequest
	(*TaskResponse)(nil),           // 3: TaskResponse
	(*TaskStatusReport)(nil),       // 4: TaskStatusReport
	(*TaskStatusAck)(nil),          // 5: TaskStatusAck
	nil,                            // 6: TaskResponse.MetadataEntry
	nil,                            // 7: TaskStatusReport.IntermediatefilesEntry
}
var file_masterapi_proto_depIdxs = []int32{
	6, // 0: TaskResponse.metadata:type_name -> TaskResponse.MetadataEntry
	7, // 1: TaskStatusReport.intermediatefiles:type_name -> TaskStatusReport.IntermediatefilesEntry
	0, // 2: MasterApi.RegisterWorker:input_type -> RegisterWorkerRequest
	2, // 3: MasterApi.RequestTask:input_type -> TaskRequest
	4, // 4: MasterApi.ReportTaskStatus:input_type -> TaskStatusReport
	1, // 5: MasterApi.RegisterWorker:output_type -> RegisterWorkerResponse
	3, // 6: MasterApi.RequestTask:output_type -> TaskResponse
	5, // 7: MasterApi.ReportTaskStatus:output_type -> TaskStatusAck
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_masterapi_proto_init() }
func file_masterapi_proto_init() {
	if File_masterapi_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_masterapi_proto_rawDesc), len(file_masterapi_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_masterapi_proto_goTypes,
		DependencyIndexes: file_masterapi_proto_depIdxs,
		MessageInfos:      file_masterapi_proto_msgTypes,
	}.Build()
	File_masterapi_proto = out.File
	file_masterapi_proto_goTypes = nil
	file_masterapi_proto_depIdxs = nil
}
